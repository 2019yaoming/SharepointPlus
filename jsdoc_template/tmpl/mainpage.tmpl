<?js
// index.html
var data = obj;
var self = this;
?>

      <div class="span10" id="main"> <!-- content -->
        <h1>SharepointPlus <?js= this.SPversion ?></h1>
        <div class="alert alert-danger">Important changes introduced with SharepointPlus v5.0. Make sure to <a href="https://github.com/Aymkdn/SharepointPlus/wiki/SharepointPlus-5.0-Announcement">read the announcement</a> and to read the <a href="https://github.com/Aymkdn/SharepointPlus/blob/master/changelog.md">changelog</a>.</div>
        <a href="https://twitter.com/sp_js" class="twitter-follow-button" data-show-count="false" data-lang="en" data-dnt="true">Follow @sp_js</a>
        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
        <a href="https://sibbell.com/" class="sibbill" title="with sibbill.com"><img src="img/sibbell.png" width="12" height="12" /> Be notified on new release</a>
        <h2>Description</h2>
        <p><a href="https://github.com/Aymkdn/SharepointPlus" title="Github Repository">SharepointPlus ($SP)</a> is a <strong>JavaScript API for Sharepoint</strong>. This library offers some extended features for SharePoint entirely on client side (requires no server install). $SP will simplify your interactions with the Sharepoint Web Services and will help you to deal with the List Forms.</p>
        <p>Other JavaScript library like this one are often complex, with few or no example. With SharepointPlus it's easy (<em>like the SQL syntax</em>) and you'll find examples for each method.</p>
        <p>I've developed this API for my needs during my job at <a href="http://www.dell.com">Dell</a> and we thought it could be useful for the community too, so here it is !</p>
        <div class="alert alert-error" style="display:none" aria-hidden="true"><a href="https://github.com/Aymkdn/SharepointPlus/tree/master/old_versions">SharepointPlus v3.0.4</a> is the last release 100% compatible with <b>Sharepoint 2007</b> -- after this version I cannot assure the retro-compatibility (even if everything should be OK anyway).<br>
        Starting SharepointPlus v3.0.5 it should be fully compatible with <b>Sharepoint 2010</b>.</div>
        <h2>Sharepoint Support</h2>
        <p>
          <b>Sharepoint 2007</b> : <a href="https://github.com/Aymkdn/SharepointPlus/tree/master/old_versions">SharepointPlus v3.0.4</a> is the last release that I have tested with <b>Sharepoint 2007</b> -- after this version I cannot assure the retro-compatibility<br>
          <b>Sharepoint 2010</b> : Compatible since SharepointPlus v3.0.4<br>
          <b>Sharepoint 2013</b> : Compatible since SharepointPlus v3.13<br>
          <b>Sharepoint 2016/Online</b> : Compatible since SharepointPlus v3.13 (not tested yet, but based on <a href="https://github.com/Aymkdn/SharepointPlus/issues/53#issuecomment-301227608">testimony</a>)
        </p>
        <h2>Browser Support</h2>
        <p>
          <b>IE11, and all modern browsers (Firefox, Chrome, Edge, ...)</b> (support for older browsers stopped from v5.0).
        </p>
        <h2>Quick Start</h2>
        <h3>Requirements</h3>
        <p>If you plan to use IE11, you need to add the <a href="https://github.com/taylorhakes/promise-polyfill">Promise polyfill</a>.</p>
        <h3>The basics</h3>
        <p>Just add one line to call SharepointPlus:</p>
<pre class="prettyprint lang-js">
  &lt;script type="text/javascript" src="sharepointplus-<?js= this.SPversion ?>.min.js">&lt;/script></pre>
        <p>You may also want to use a CDN: <a href="http://www.jsdelivr.com/#!sharepointplus">SharepointPlus on JSDelivr</a></p>
        <h4>Lists</h4>
        <p>SharepointPlus is mainly based on the different <a href="http://sympmarc.github.io/SPServices/core/web-services.html" title="Link to Sympraxis website with some documentation regarding the Sharepoint Web Services">Web Services</a> provided by Sharepoint.</p>
        <p>Let's see some examples of what you can do with SharepointPlus regarding the Lists interaction:</p>
<pre class="prettyprint lang-js">
// Update all items with an "Amount" value bigger than 1000
$SP().list('My List Name').update({
  Title:"Too expensive"
}, {
  where:"Amount > 1000"
}).then(function(res) {
  alert(res.passed.length+" items successfully updated!");
});

// Get all items with "Requestor" as the current user and with "Default Color" is "pink"
$SP().list('ListName').get({
  fields:"Title,Size",
  where:"Requestor = '[Me]' AND Default_x0020_Color = 'pink'",
  orderby:"Size DESC"
}).then(function(data) {
  var html = "&lt;ul>";
  for (var i=data.length; i--;)
    html += "&lt;li>Model '"+data[i].getAttribute("Title")+"' (size: "+data[i].getAttribute("Default_x0020_Color")+")&lt;li>";
  $('#list').append(html+'&lt;/ul>');
});
</pre>
<p>Find more examples on <a href="https://aymkdn.github.io/SharepointPlus/lists.html">the dedicated page</a>.</p>
        <h4>Forms</h4>
        <p>The <a href="https://github.com/Aymkdn/SharepointPlus/tree/master/plugins/formfields">plugin <em>formfields</em></a> of SharepointPlus provides few functions to interact with <em>NewForm.aspx</em> and <em>EditForm.aspx</em> of a list:</p>
<pre class="prettyprint lang-js">
// make sure to call the plugin: &lt;script type="text/javascript" src="sp-plugin.formfields.js">&lt;/script>

// hide the &lt;TR> for the field "Title", and add a red background for the &lt;TR> for the field "Next Action"
var rows=$SP().formfields("Title,Next Action").row(); // row() returns a HTMLNodeElement (or a jQuery object if jQuery is available) that represents the &lt;TR> element
rows[0].style.display="none";
rows[1].style.backgroundColor="red";

// check if all mandatory fields have a value, and also "Title"
$SP().formfields("Title",{mandatory:true}).each(function() {
  if (this.val() == "") {
    alert(this.name+" is empty!");
  }
});
</pre>
<p>Find more examples on <a href="https://aymkdn.github.io/SharepointPlus/forms.html">the dedicated page</a>.</p>
        <h4>Utilities</h4>
        <p>SharepointPlus has also some useful functions:</p>
<pre class="prettyprint lang-js">
// take a number and return it as a currency amount
$SP().toCurrency(1500000,2,'$'); // --> $1,500,000.00

// when you have to deal with a date from a .get() ...
$SP().list('My Calendar List').get({fields:"Meeting_x0020_Date"}).then(function(data) {
  for (var i=data.length; i--;) console.log($SP().toDate(data[i].getAttribute("Meeting_x0020_Date")).getFullYear());
});
// ... or to a .add()/.update()
var nextMeeting = new Date("5/May/2015");
$SP().list('ListName').add({Title:"Next Meeting",Meeting_x0020_Date:$SP.toSPDate(nextMeeting)});
</pre>
<p>Find more examples on <a href="https://aymkdn.github.io/SharepointPlus/utils.html">the dedicated page</a>.</p>

<h1>NodeJS</h1>
<p>Since SharepointPlus 4.0 you can use it as a node module for your server side applications.</p>
<pre class="prettyprint lang-bash">
npm install sharepointplus
</pre>
<p>Find below some examples:</p>
<pre class="prettyprint lang-js">
// the credentials depend of your authentication system
// see: https://github.com/s-KaiNet/node-sp-auth
const credentials = {
  username:'my_username',
  password:'mypassword',
  domain:'mydomain'
};
// you can also define a proxy
const proxyweb = "http://" + credentials.domain + "%5C" + credentials.username + ":" + credentials.password + "@proxy:80";

const $SP = require('sharepointplus');
const sp = $SP().proxy(proxyweb).auth(credentials);

// you can then use SharepointPlus normally
// e.g.: sp.list("Hello", "http://my.sharepoint.site/").get(...);
</pre>

<h1>Old Versions</h1>
<p>The previous versions of SharepointPlus are available in the <a href="https://github.com/Aymkdn/SharepointPlus/releases">releases folder</a></p>
<p>The documentation for SharepointPlus v4.0 is available at <a href="https://sharepointplus4.netlify.com/">https://sharepointplus4.netlify.com/</a>

      </div>


