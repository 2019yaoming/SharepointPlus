<?js
// index.html
var data = obj;
var self = this;
?>

      <div class="span10"> <!-- content -->
        <h1>SharepointPlus <?js= this.SPversion ?></h1>
        <a href="https://twitter.com/sp_js" class="twitter-follow-button" data-show-count="false" data-lang="fr" data-dnt="true">Follow @sp_js</a>
        <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
        <h2>Description</h2>
        <p>SharepointPlus ($SP) is a <strong>JavaScript API for Sharepoint</strong>. This library offers some extended features for SharePoint entirely on client side (requires no server install). $SP will simplify your interactions with the Sharepoint Web Services and will help you to deal with the List Forms.</p>
        <p>Other JavaScript library like this one are often complex, with few or no example. With SharepointPlus it's easy (<em>like the SQL syntax</em>) and you'll find examples for each method.</p>
        <p>I've developed this API for my needs during my job at <a href="http://www.dell.com">Dell</a> and we thought it could be useful for the community too, so here it is !</p>
        <div class="alert alert-error" style="display:none" aria-hidden="true"><a href="https://github.com/Aymkdn/SharepointPlus/tree/master/old_versions">SharepointPlus v3.0.4</a> is the last release 100% compatible with <b>Sharepoint 2007</b> -- after this version I cannot assure the retro-compatibility (even if everything should be OK anyway).<br>
        Starting SharepointPlus v3.0.5 it should be fully compatible with <b>Sharepoint 2010</b>.</div>
        <h2>Sharepoint Support</h2>
        <p>
          <b>Sharepoint 2007</b> : <a href="https://github.com/Aymkdn/SharepointPlus/tree/master/old_versions">SharepointPlus v3.0.4</a> is the last release that I have tested with <b>Sharepoint 2007</b> -- after this version I cannot assure the retro-compatibility<br>
          <b>Sharepoint 2010</b> : Compatible since SharepointPlus v3.0.4<br>
          <b>Sharepoint 2013</b> : Compatible since SharepointPlus v3.13<br>
          <b>Sharepoint Online</b> : I have no plan to test SharepointPlus on Sharepoint Online, but it should be compatible.
        </p>
        <h2>Browser Support</h2>
        <p>
          <b>IE8+, and all modern browsers (Firefox, Chrome, ....)</b>
        </p>
        <h2>Quick Start</h2>
        <h3>Requirements</h3>
        <p>Since v3.13, there is no more need of <a href="http://jquery.com/" title="Link to jQuery library">jQuery</a> to work! For older versions, make sure to include jQuery.</p>
        <div class="row"><div class="span8 alert alert-info">If you don't use jQuery in your project, then SharepointPlus will need to use <a href="https://github.com/Aymkdn/SharepointPlus/nanoajax/nanoajax.min.js">nanoajax (811o minified and zipped)</a><div class=""></div></div></div>
        <h3>The basics</h3>
        <p>Just add two lines: one to call <b>either</b> jQuery <b>or</b> nanoajax, and one for SharepointPlus:</p>
<pre class="prettyprint lang-js">// if you don't already use jQuery, then you need to call 'nanoajax':
&lt;script type="text/javascript" src="nanoajax.min.js">&lt;/script>
&lt;script type="text/javascript" src="sharepointplus-<?js= this.SPversion ?>.min.js">&lt;/script></pre>
        <p>You may also want to use a CDN: <a href="http://www.jsdelivr.com/#!sharepointplus">SharepointPlus on JSDelivr</a></p>
        <h4><small>Lists</small></h4>
        <p>Sharepoint provides different <a href="http://spservices.codeplex.com/wikipage?title=$%28%29.SPServices&referringTitle=Documentation" title="Link to codeplex.com with some documentation regarding the Sharepoint Web Services">Web Services</a> that permits to do several tasks.</p>
        <p>Let's see some examples of what you can do with SharepointPlus regarding the Lists interaction:</p>
<pre class="prettyprint lang-js">
// Update all items with an "Amount" value bigger than 1000
$SP().list('My List Name').update({Title:"Too expensive"},{where:"Amount > 1000",success:function(items) { alert(items.length+" items updated!"); });

// Get all items with "Requestor" is the current user and with "Default Color" is "pink"
$SP().list('ListName').get({fields:"Title,Size",where:"Requestor = '[Me]' AND Default_x0020_Color = 'pink'",orderby:"Size DESC"},function(data) {
  var html = "&lt;ul>";
  for (var i=data.length; i--;)
    html += "&lt;li>Model '"+data[i].getAttribute("Title")+"' (size: "+data[i].getAttribute("Default_x0020_Color")+")&lt;li>";
  $('#list').append(html+'&lt;/ul>');
});
</pre>
        <h4><small>Forms</small></h4>
        <p>SharepointPlus provides few functions to interact with <em>NewForm.aspx</em> and <em>EditForm.aspx</em> of a list:</p>
<pre class="prettyprint lang-js">
// hide some fields like "Title", "Next Action"
$SP().formfields("Title,Next Action").row().hide(); // row() returns a jQuery object that represents the &lt;TR> element

// check if all mandatory fields have a value, and also "Title"
$SP().formfields("Title",{mandatory:true}).each(function() {
  if (this.val() == "") {
    alert(this.name+" is empty!");
    return false;
  }
});
</pre>
        <h4><small>Utilities</small></h4>
        <p>SharepointPlus has also some useful functions:</p>
<pre class="prettyprint lang-js">
// create a Excel file
var table="&lt;table>&lt;tr>&lt;th>Column 1&lt;/th>&lt;th>Column 2&lt;/th>&lt;/tr>&lt;tr>&lt;td>First cell&lt;/td>&lt;td>Other cell&lt;/td>&lt;/tr>&lt;/body>";
$SP().createFile({content:table,library:"Shared Documents",filename:"myfile.xls",after:function() { alert("File created!"); }});

// take a number and return it as a currency amount
$SP().toCurrency(1500000,2,'$'); // --> $1,500,000.00

// when you have to deal with a date from a .get() ...
$SP().list('My Calendar List').get({fields:"Meeting_x0020_Date"},function(data) {
  for (var i=data.length; i--;) console.log($SP().toDate(data[i].getAttribute("Meeting_x0020_Date")).getFullYear());
});
// ... or to a .add()/.update()
var nextMeeting = new Date("5/May/2015");
$SP().list('ListName').add({Title:"Next Meeting",Meeting_x0020_Date:$SP.toSPDate(nextMeeting)});
</pre>

        <h4><small>Promise</small></h4>
        <p>SharepointPlus is not yet Promise-compatible, however you can use, for example, <a href="http://api.jquery.com/category/deferred-object/">jQuery.Deferred</a>. Find below some examples:</p>
<pre class="prettyprint lang-js">
// Call two lists in the same time before doing some stuff with the result
$.when(
  (function() {
    var deferred = jQuery.Deferred();
    $SP().list("List 1").get({fields:"Title,Other_x0020_Field", where:"Created = [Today]"}, function(data, err) {
      if (err) {
        deferred.reject(err);
      } else {
        deferred.resolve(data);
      }
    })
    return deferred;
  }()),
  (function() {
    var deferred = jQuery.Deferred();
    $SP().list("List 2").get({fields:"Title,Cost", where:"Cost > 100"}, function(data, err) {
      if (err) {
        deferred.reject(err);
      } else {
        deferred.resolve(data);
      }
    })
    return deferred;
  }())
).done(function(dataList1, dataList2) {
  // do some stuff here
}).fail(function(err) {
  alert("[ERROR] "+err)
})
</pre>
      </div>


